===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
webhooks client 3044552592: '?'
=============== Log rollover at Fri Jan 20 10:26:00 2023 ===============
webhooks client 3044552592: New connection
webhooks client 3044552592: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
MCU error during connect
Traceback (most recent call last):
  File "/home/thw/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/thw/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/thw/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/thw/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/thw/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/thw/klipper/klippy/../.config
No build file /home/thw/klipper/klippy/../out/klipper.dict
No build file /home/thw/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Fri Jan 20 18:19:29 2023 (1674231570.0 56.3)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
webhooks client 3062586864: New connection
webhooks client 3062586864: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
MCU error during connect
Traceback (most recent call last):
  File "/home/thw/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/thw/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/thw/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/thw/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/thw/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/thw/klipper/klippy/../.config
No build file /home/thw/klipper/klippy/../out/klipper.dict
No build file /home/thw/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Fri Jan 20 18:37:23 2023 (1674232643.3 111.0)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
webhooks client 3045392272: New connection
webhooks client 3045392272: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
MCU error during connect
Traceback (most recent call last):
  File "/home/thw/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/thw/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/thw/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/thw/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/thw/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/thw/klipper/klippy/../.config
No build file /home/thw/klipper/klippy/../out/klipper.dict
No build file /home/thw/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Fri Jan 20 18:43:11 2023 (1674232991.2 53.9)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
webhooks client 3044834800: New connection
webhooks client 3044834800: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
MCU error during connect
Traceback (most recent call last):
  File "/home/thw/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/thw/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/thw/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/thw/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/thw/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/thw/klipper/klippy/../.config
No build file /home/thw/klipper/klippy/../out/klipper.dict
No build file /home/thw/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Fri Jan 20 18:54:11 2023 (1674233651.1 53.8)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
webhooks client 3044388816: New connection
webhooks client 3044388816: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
MCU error during connect
Traceback (most recent call last):
  File "/home/thw/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/thw/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/thw/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/thw/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/thw/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/thw/klipper/klippy/../.config
No build file /home/thw/klipper/klippy/../out/klipper.dict
No build file /home/thw/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Fri Jan 20 19:50:21 2023 (1674237021.6 54.4)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
webhooks client 3044533008: New connection
webhooks client 3044533008: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
MCU error during connect
Traceback (most recent call last):
  File "/home/thw/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/thw/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/thw/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/thw/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/thw/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/thw/klipper/klippy/../.config
No build file /home/thw/klipper/klippy/../out/klipper.dict
No build file /home/thw/klipper/klippy/../out/klipper.elf
