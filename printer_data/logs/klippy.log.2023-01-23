=============== Log rollover at Mon Jan 23 18:24:54 2023 ===============
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Mon Jan 23 18:25:03 2023 (1674491103.9 72.7)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
webhooks client 3045443952: New connection
webhooks client 3045443952: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
Loaded MCU 'mcu' 105 commands (v0.10.0-615-g96ea871b / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=357.558140 slope=-767.441860
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (15.0, 15.0)    | (15.0, 15.0)
  1   | (86.7, 15.0)    | (86.7, 15.0)
  2   | (158.3, 15.0)   | (158.3, 15.0)
  3   | (230.0, 15.0)   | (230.0, 15.0)
  4   | (230.0, 86.7)   | (230.0, 86.7)
  5   | (158.3, 86.7)   | (158.3, 86.7)
  6   | (86.7, 86.7)    | (86.7, 86.7)
  7   | (15.0, 86.7)    | (15.0, 86.7)
  8   | (15.0, 158.3)   | (15.0, 158.3)
  9   | (86.7, 158.3)   | (86.7, 158.3)
  10  | (158.3, 158.3)  | (158.3, 158.3)
  11  | (230.0, 158.3)  | (230.0, 158.3)
  12  | (230.0, 230.0)  | (230.0, 230.0)
  13  | (158.3, 230.0)  | (158.3, 230.0)
  14  | (86.7, 230.0)   | (86.7, 230.0)
  15  | (15.0, 230.0)   | (15.0, 230.0)
Starting heater checks for extruder
webhooks: registering remote method 'shutdown_machine' for connection id: 3045443952
webhooks: registering remote method 'reboot_machine' for connection id: 3045443952
webhooks: registering remote method 'pause_job_queue' for connection id: 3045443952
webhooks: registering remote method 'start_job_queue' for connection id: 3045443952
Resetting prediction variance 87.334: freq=71437877 diff=6104906 stddev=99751.586
Transition to shutdown state: Shutdown due to webhooks request
Dumping gcode input 0 blocks
Dumping 20 requests for client 3045443952
Received 76.282173: b'{"id": 3053303088, "method": "info", "params": {}}'
Received 76.552040: b'{"id": 2831353936, "method": "info", "params": {}}'
Received 76.808510: b'{"id": 2829541264, "method": "info", "params": {}}'
Received 76.812294: b'{"id": 2829954480, "method": "list_endpoints", "params": {}}'
Received 76.869942: b'{"id": 2829261552, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "print_stats": null}, "response_template": {"method": "process_status_update"}}}'
Received 76.970192: b'{"id": 2829262768, "method": "objects/list", "params": {}}'
Received 76.974281: b'{"id": 2829262768, "method": "objects/query", "params": {"objects": {"configfile": null}}}'
Received 77.236458: b'{"id": 2831353936, "method": "register_remote_method", "params": {"response_template": {"method": "shutdown_machine"}, "remote_method": "shutdown_machine"}}'
Received 77.242470: b'{"id": 2829271088, "method": "register_remote_method", "params": {"response_template": {"method": "reboot_machine"}, "remote_method": "reboot_machine"}}'
Received 77.246956: b'{"id": 2829271088, "method": "register_remote_method", "params": {"response_template": {"method": "pause_job_queue"}, "remote_method": "pause_job_queue"}}'
Received 77.252876: b'{"id": 2829271088, "method": "register_remote_method", "params": {"response_template": {"method": "start_job_queue"}, "remote_method": "start_job_queue"}}'
Received 77.259773: b'{"id": 2829273616, "method": "objects/query", "params": {"objects": {"heaters": null}}}'
Received 77.261848: b'{"id": 2829273104, "method": "objects/query", "params": {"objects": {"heaters": null}}}'
Received 77.471870: b'{"id": 2829273616, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "print_stats": null, "heater_bed": null, "temperature_fan Mainboard": null, "extruder": null}, "response_template": {"method": "process_status_update"}}}'
Received 77.471870: b'{"id": 2829271408, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "print_stats": null, "heater_bed": null, "temperature_fan Mainboard": null, "extruder": null}, "response_template": {"method": "process_status_update"}}}'
Received 84.003547: b'{"id": 2829099728, "method": "info", "params": {}}'
Received 84.004463: b'{"id": 2829099152, "method": "objects/list", "params": {}}'
Received 84.004463: b'{"id": 2829541296, "method": "gcode/help", "params": {}}'
Received 84.045661: b'{"id": 2820073392, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "print_stats": null, "heater_bed": null, "temperature_fan Mainboard": null, "extruder": null, "configfile": null, "mcu": null, "pause_resume": null, "display_status": null, "gcode_macro CANCEL_PRINT": null, "gcode_macro PAUSE": null, "gcode_macro RESUME": null, "gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL": null, "gcode_macro M600": null, "gcode_macro PA_Calibration": null, "gcode_macro PID_BED": null, "gcode_macro PID_Extruder": null, "gcode_macro Motor_off": null, "gcode_macro M300": null, "gcode_macro PRIME_LINE": null, "gcode_macro _USER_VARIABLES_CALIBRATE": null, "gcode_macro _CALIBRATE_START": null, "gcode_macro _CALIBRATE_END": null, "gcode_macro KALIBRIEREN": null, "gcode_macro PRESSURE_ADVANCE_CALIBRATION": null, "gcode_macro FLOW_MULTIPLIER_CALIBRATION": null, "gcode_macro COMPUTE_FLOW_MULTIPLIER": null, "gcode_move": null, "gcode_macro _FLOW_CALIB_VARIABLES": null, "gcode_macro m205": null, "save_variables": null, "virtual_sdcard": null, "heaters": null, "heater_fan extruder_fan": null, "fan": null, "probe": null, "output_pin BEEPER_PIN": null, "output_pin probe_reset_pin": null, "output_pin LED": null, "bed_mesh": null, "z_tilt": null, "filament_switch_sensor runout": null, "gcode_macro START_PRINT": null, "gcode_macro END_PRINT": null, "gcode_macro probe_reset": null, "motion_report": null, "query_endstops": null, "idle_timeout": null, "system_stats": null, "manual_probe": null, "toolhead": null}, "response_template": {"method": "process_status_update"}}}'
Received 116.429906: b'{"id": 2829615632, "method": "emergency_stop", "params": {}}'
gcode state: absolute_coord=True absolute_extrude=True base_position=[0.0, 0.0, 0.0, 0.0] last_position=[0.0, 0.0, 2.0275, 0.0] homing_position=[0.0, 0.0, 0.0, 0.0] speed_factor=0.016666666666666666 extrude_factor=1.0 speed=25.0
Reactor garbage collection: (77.468757421, 0.0, 0.0)
MCU 'mcu' shutdown: Command request
clocksync state: mcu_freq=72000000 last_clock=804146124114 clock_est=(93.951 802565582566 71995103.880) min_half_rtt=0.002696 min_rtt_time=92.264 time_avg=93.948(225.247) clock_avg=802565582566.646(16216680072.359) pred_variance=5128140181.983
Dumping serial stats: bytes_write=1621 bytes_read=10795 bytes_retransmit=18 bytes_invalid=7 send_seq=177 receive_seq=177 retransmit_seq=2 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0
Dumping send queue 100 messages
Sent 0 75.864754 75.864754 9: seq: 1d, identify offset=2440 count=40
Sent 1 75.875618 75.875618 9: seq: 1e, identify offset=2480 count=40
Sent 2 75.886207 75.886207 9: seq: 1f, identify offset=2520 count=40
Sent 3 75.896553 75.896553 9: seq: 10, identify offset=2560 count=40
Sent 4 75.907020 75.907020 9: seq: 11, identify offset=2600 count=40
Sent 5 75.917946 75.917946 9: seq: 12, identify offset=2640 count=40
Sent 6 75.929665 75.929665 9: seq: 13, identify offset=2680 count=40
Sent 7 75.941658 75.941658 9: seq: 14, identify offset=2720 count=40
Sent 8 75.952827 75.952827 9: seq: 15, identify offset=2760 count=40
Sent 9 75.962044 75.962044 9: seq: 16, identify offset=2762 count=40
Sent 10 75.999881 75.999641 6: seq: 17, get_uptime
Sent 11 76.061771 76.061531 6: seq: 18, get_clock
Sent 12 76.123264 76.123024 6: seq: 19, get_clock
Sent 13 76.182712 76.182472 6: seq: 1a, get_clock
Sent 14 76.244754 76.244514 6: seq: 1b, get_clock
Sent 15 76.302982 76.302742 6: seq: 1c, get_clock
Sent 16 76.360935 76.360695 6: seq: 1d, get_clock
Sent 17 76.419986 76.419746 6: seq: 1e, get_clock
Sent 18 76.479496 76.479256 6: seq: 1f, get_clock
Sent 19 76.490909 76.490669 6: seq: 10, get_config
Sent 20 76.495151 76.494911 6: seq: 11, get_clock
Sent 21 76.524518 76.524238 7: seq: 12, allocate_oids count=32
Sent 22 76.528615 76.528175 11: seq: 13, config_digital_out oid=15 pin=PB1 value=0 default_value=1 max_duration=0
Sent 23 76.532451 76.532051 10: seq: 14, set_digital_out_pwm_cycle oid=15 cycle_ticks=720000
Sent 24 76.535087 76.534767 8: seq: 15, config_analog_in oid=16 pin=PB0
Sent 25 76.538144 76.537544 15: seq: 16, config_digital_out oid=17 pin=PA4 value=0 default_value=0 max_duration=360000000
Sent 26 76.540242 76.539802 11: seq: 17, set_digital_out_pwm_cycle oid=17 cycle_ticks=7200000
Sent 27 76.543538 76.543098 11: seq: 18, config_digital_out oid=18 pin=PA0 value=0 default_value=0 max_duration=0
Sent 28 76.543938 76.543312 10: seq: 19, set_digital_out_pwm_cycle oid=18 cycle_ticks=720000
Sent 29 76.544378 76.543526 11: seq: 1a, config_digital_out oid=19 pin=PA14 value=0 default_value=1 max_duration=0
Sent 30 76.544778 76.543678 10: seq: 1b, set_digital_out_pwm_cycle oid=19 cycle_ticks=720000
Sent 31 76.545138 76.543831 9: seq: 1c, config_analog_in oid=20 pin=ADC_TEMPERATURE
Sent 32 76.545498 76.543983 9: seq: 1d, config_endstop oid=0 pin=PB12 pull_up=0
Sent 33 76.545778 76.544105 7: seq: 1e, config_trsync oid=1
Sent 34 76.546218 76.544288 11: seq: 1f, config_digital_out oid=21 pin=PB15 value=0 default_value=0 max_duration=0
Sent 35 76.546618 76.544411 10: seq: 10, set_digital_out_pwm_cycle oid=21 cycle_ticks=72000
Sent 36 76.558846 76.556526 58: seq: 11, config_digital_out oid=22 pin=PB13 value=0 default_value=0 max_duration=0, config_digital_out oid=23 pin=PA13 value=0 default_value=0 max_duration=0, config_buttons oid=24 button_count=1, config_stepper oid=2 step_pin=PC2 dir_pin=PB9 invert_step=0 step_pulse_ticks=144, config_digital_out oid=25 pin=PC3 value=1 default_value=1 max_duration=0, config_endstop oid=3 pin=PA7 pull_up=0, config_trsync oid=4, config_stepper oid=5 step_pin=PB8 dir_pin=PB7 invert_step=0 step_pulse_ticks=144, config_digital_out oid=26 pin=PC13 value=1 default_value=1 max_duration=0, config_endstop oid=6 pin=PC5 pull_up=0, config_trsync oid=7
Sent 37 76.561326 76.556526 62: seq: 12, config_stepper oid=8 step_pin=PB6 dir_pin=PB5 invert_step=0 step_pulse_ticks=144, config_digital_out oid=27 pin=PC14 value=1 default_value=1 max_duration=0, config_endstop oid=9 pin=PB2 pull_up=0, config_trsync oid=10, config_stepper oid=11 step_pin=PC0 dir_pin=PC1 invert_step=0 step_pulse_ticks=144, config_digital_out oid=28 pin=PC15 value=1 default_value=1 max_duration=0, config_endstop oid=12 pin=PC6 pull_up=0, config_trsync oid=13, config_analog_in oid=29 pin=PC4, config_digital_out oid=30 pin=PA1 value=0 default_value=0 max_duration=360000000, set_digital_out_pwm_cycle oid=30 cycle_ticks=7200000
Sent 38 76.563806 76.556526 62: seq: 13, config_stepper oid=14 step_pin=PB4 dir_pin=PB3 invert_step=0 step_pulse_ticks=144, config_digital_out oid=31 pin=PA15 value=1 default_value=1 max_duration=0, finalize_config crc=695796063, queue_digital_out oid=15 clock=2459431004 on_ticks=0, query_analog_in oid=16 clock=2507602944 sample_ticks=72000 sample_count=8 rest_ticks=21600000 min_value=16414 max_value=32303 range_check_count=4, queue_digital_out oid=17 clock=2459483327 on_ticks=0
Sent 39 76.569133 76.566933 55: seq: 14, queue_digital_out oid=18 clock=2459498588 on_ticks=0, queue_digital_out oid=19 clock=2459511669 on_ticks=0, query_analog_in oid=20 clock=2510482944 sample_ticks=72000 sample_count=8 rest_ticks=21600000 min_value=10994 max_value=14410 range_check_count=4, queue_digital_out oid=21 clock=2459869207 on_ticks=0, buttons_add oid=24 pos=0 pin=PA5 pull_up=0
Sent 40 76.571013 76.566933 47: seq: 15, buttons_query oid=24 clock=2513362944 rest_ticks=144000 retransmit_count=50 invert=0, query_analog_in oid=29 clock=2516962944 sample_ticks=72000 sample_count=8 rest_ticks=21600000 min_value=998 max_value=32331 range_check_count=4, queue_digital_out oid=30 clock=2460817555 on_ticks=0, get_config
Sent 41 76.597516 76.597236 7: seq: 16, stepper_get_position oid=2
Sent 42 76.605329 76.605049 7: seq: 17, stepper_get_position oid=5
Sent 43 76.613569 76.613289 7: seq: 18, stepper_get_position oid=8
Sent 44 76.620374 76.620094 7: seq: 19, stepper_get_position oid=11
Sent 45 76.627851 76.627571 7: seq: 1a, stepper_get_position oid=14
Sent 46 77.455039 77.454719 8: seq: 1b, buttons_ack oid=24 count=1
Sent 47 77.480136 77.479896 6: seq: 1c, get_clock
Sent 48 77.782864 77.782264 15: seq: 1d, queue_digital_out oid=19 clock=2554258943 on_ticks=720000
Sent 49 78.286710 78.286110 15: seq: 1e, queue_digital_out oid=19 clock=2590258943 on_ticks=679752
Sent 50 78.465579 78.465339 6: seq: 1f, get_clock
Sent 51 78.991544 78.990944 15: seq: 10, queue_digital_out oid=19 clock=2640658944 on_ticks=642179
Sent 52 79.450443 79.450203 6: seq: 11, get_clock
Sent 53 80.200803 80.200203 15: seq: 12, queue_digital_out oid=19 clock=2727058943 on_ticks=604783
Sent 54 80.435397 80.435157 6: seq: 13, get_clock
Sent 55 81.411038 81.410438 15: seq: 14, queue_digital_out oid=19 clock=2813458944 on_ticks=566594
Sent 56 81.419742 81.419502 6: seq: 15, get_clock
Sent 57 82.404819 82.404579 6: seq: 16, get_clock
Sent 58 82.619656 82.619056 15: seq: 17, queue_digital_out oid=19 clock=2899858943 on_ticks=529400
Sent 59 83.389102 83.388862 6: seq: 18, get_clock
Sent 60 83.829495 83.828895 15: seq: 19, queue_digital_out oid=19 clock=2986258943 on_ticks=490739
Sent 61 84.384524 84.384284 6: seq: 1a, get_clock
Sent 62 85.039120 85.038520 15: seq: 1b, queue_digital_out oid=19 clock=3072658944 on_ticks=451342
Sent 63 85.364505 85.364265 6: seq: 1c, get_clock
Sent 64 86.248806 86.248206 15: seq: 1d, queue_digital_out oid=19 clock=3159058943 on_ticks=413359
Sent 65 86.349673 86.349433 6: seq: 1e, get_clock
Sent 66 87.334357 87.333717 16: seq: 1f, get_clock, queue_digital_out oid=19 clock=3245458944 on_ticks=373724
Sent 67 88.319033 88.318793 6: seq: 10, get_clock
Sent 68 88.568630 88.568030 15: seq: 11, queue_digital_out oid=19 clock=3331858943 on_ticks=335158
Sent 69 89.303530 89.303290 6: seq: 12, get_clock
Sent 70 89.770382 89.769782 15: seq: 13, queue_digital_out oid=19 clock=3418258943 on_ticks=296230
Sent 71 90.288088 90.287848 6: seq: 14, get_clock
Sent 72 90.968575 90.968055 13: seq: 15, queue_digital_out oid=19 clock=3504658944 on_ticks=0
Sent 73 91.279177 91.278937 6: seq: 16, get_clock
Sent 74 92.263766 92.263526 6: seq: 17, get_clock
Sent 75 93.248812 93.248572 6: seq: 18, get_clock
Sent 76 94.233767 94.233527 6: seq: 19, get_clock
Sent 77 95.218905 95.218665 6: seq: 1a, get_clock
Sent 78 96.204134 96.203894 6: seq: 1b, get_clock
Sent 79 97.189943 97.189703 6: seq: 1c, get_clock
Sent 80 98.174776 98.174536 6: seq: 1d, get_clock
Sent 81 99.159517 99.159277 6: seq: 1e, get_clock
Sent 82 100.144014 100.143774 6: seq: 1f, get_clock
Sent 83 101.128725 101.128485 6: seq: 10, get_clock
Sent 84 102.113619 102.113379 6: seq: 11, get_clock
Sent 85 103.098085 103.097845 6: seq: 12, get_clock
Sent 86 104.082246 104.082006 6: seq: 13, get_clock
Sent 87 105.067232 105.066992 6: seq: 14, get_clock
Sent 88 106.052309 106.052069 6: seq: 15, get_clock
Sent 89 107.036745 107.036505 6: seq: 16, get_clock
Sent 90 108.022218 108.021978 6: seq: 17, get_clock
Sent 91 109.006441 109.006201 6: seq: 18, get_clock
Sent 92 109.991578 109.991338 6: seq: 19, get_clock
Sent 93 110.976533 110.976293 6: seq: 1a, get_clock
Sent 94 111.961305 111.961065 6: seq: 1b, get_clock
Sent 95 112.946229 112.945989 6: seq: 1c, get_clock
Sent 96 113.930848 113.930608 6: seq: 1d, get_clock
Sent 97 114.915803 114.915563 6: seq: 1e, get_clock
Sent 98 115.900697 115.900457 6: seq: 1f, get_clock
Sent 99 116.433381 116.433141 6: seq: 10, emergency_stop
Dumping receive queue 100 messages
Receive: 0 107.678727 107.036745 15: seq: 17, analog_in_state oid=16 next_clock=415835648 value=31429
Receive: 1 107.718674 107.036745 15: seq: 17, analog_in_state oid=20 next_clock=418715648 value=13620
Receive: 2 107.808732 107.036745 15: seq: 17, analog_in_state oid=29 next_clock=425195648 value=31436
Receive: 3 107.978654 107.036745 15: seq: 17, analog_in_state oid=16 next_clock=437435648 value=31423
Receive: 4 108.018693 107.036745 15: seq: 17, analog_in_state oid=20 next_clock=440315648 value=13620
Receive: 5 108.028740 108.022218 11: seq: 18, clock clock=419951096
Receive: 6 108.108781 108.022218 15: seq: 18, analog_in_state oid=29 next_clock=446795648 value=31434
Receive: 7 108.278947 108.022218 15: seq: 18, analog_in_state oid=16 next_clock=459035648 value=31419
Receive: 8 108.318589 108.022218 15: seq: 18, analog_in_state oid=20 next_clock=461915648 value=13619
Receive: 9 108.408768 108.022218 15: seq: 18, analog_in_state oid=29 next_clock=468395648 value=31432
Receive: 10 108.578721 108.022218 15: seq: 18, analog_in_state oid=16 next_clock=480635648 value=31412
Receive: 11 108.618638 108.022218 15: seq: 18, analog_in_state oid=20 next_clock=483515648 value=13621
Receive: 12 108.708665 108.022218 15: seq: 18, analog_in_state oid=29 next_clock=489995648 value=31434
Receive: 13 108.878739 108.022218 15: seq: 18, analog_in_state oid=16 next_clock=502235648 value=31426
Receive: 14 108.918625 108.022218 15: seq: 18, analog_in_state oid=20 next_clock=505115648 value=13611
Receive: 15 109.008591 108.022218 15: seq: 18, analog_in_state oid=29 next_clock=511595648 value=31427
Receive: 16 109.014244 109.006441 11: seq: 19, clock clock=490897304
Receive: 17 109.178788 109.006441 15: seq: 19, analog_in_state oid=16 next_clock=523835648 value=31415
Receive: 18 109.218705 109.006441 15: seq: 19, analog_in_state oid=20 next_clock=526715648 value=13615
Receive: 19 109.308732 109.006441 15: seq: 19, analog_in_state oid=29 next_clock=533195648 value=31434
Receive: 20 109.478623 109.006441 15: seq: 19, analog_in_state oid=16 next_clock=545435648 value=31420
Receive: 21 109.518723 109.006441 15: seq: 19, analog_in_state oid=20 next_clock=548315648 value=13621
Receive: 22 109.608780 109.006441 15: seq: 19, analog_in_state oid=29 next_clock=554795648 value=31436
Receive: 23 109.779343 109.006441 15: seq: 19, analog_in_state oid=16 next_clock=567035648 value=31423
Receive: 24 109.818741 109.006441 15: seq: 19, analog_in_state oid=20 next_clock=569915648 value=13616
Receive: 25 109.908768 109.006441 15: seq: 19, analog_in_state oid=29 next_clock=576395648 value=31441
Receive: 26 109.998040 109.991578 11: seq: 1a, clock clock=561729104
Receive: 27 110.080033 109.991578 15: seq: 1a, analog_in_state oid=16 next_clock=588635648 value=31423
Receive: 28 110.118668 109.991578 15: seq: 1a, analog_in_state oid=20 next_clock=591515648 value=13622
Receive: 29 110.208786 109.991578 15: seq: 1a, analog_in_state oid=29 next_clock=597995648 value=31435
Receive: 30 110.378769 109.991578 15: seq: 1a, analog_in_state oid=16 next_clock=610235648 value=31423
Receive: 31 110.418686 109.991578 15: seq: 1a, analog_in_state oid=20 next_clock=613115648 value=13618
Receive: 32 110.508652 109.991578 15: seq: 1a, analog_in_state oid=29 next_clock=619595648 value=31440
Receive: 33 110.678788 109.991578 15: seq: 1a, analog_in_state oid=16 next_clock=631835648 value=31429
Receive: 34 110.718674 109.991578 15: seq: 1a, analog_in_state oid=20 next_clock=634715648 value=13619
Receive: 35 110.808701 109.991578 15: seq: 1a, analog_in_state oid=29 next_clock=641195648 value=31425
Receive: 36 110.979569 109.991578 15: seq: 1a, analog_in_state oid=16 next_clock=653435648 value=31422
Receive: 37 110.985008 110.976533 11: seq: 1b, clock clock=632800088
Receive: 38 111.018692 110.976533 15: seq: 1b, analog_in_state oid=20 next_clock=656315648 value=13616
Receive: 39 111.108811 110.976533 15: seq: 1b, analog_in_state oid=29 next_clock=662795648 value=31436
Receive: 40 111.278641 110.976533 15: seq: 1b, analog_in_state oid=16 next_clock=675035648 value=31418
Receive: 41 111.318772 110.976533 15: seq: 1b, analog_in_state oid=20 next_clock=677915648 value=13624
Receive: 42 111.409592 110.976533 15: seq: 1b, analog_in_state oid=29 next_clock=684395648 value=31433
Receive: 43 111.578690 110.976533 15: seq: 1b, analog_in_state oid=16 next_clock=696635648 value=31423
Receive: 44 111.618668 110.976533 15: seq: 1b, analog_in_state oid=20 next_clock=699515648 value=13622
Receive: 45 111.708817 110.976533 15: seq: 1b, analog_in_state oid=29 next_clock=705995648 value=31430
Receive: 46 111.878739 110.976533 15: seq: 1b, analog_in_state oid=16 next_clock=718235648 value=31422
Receive: 47 111.918656 110.976533 15: seq: 1b, analog_in_state oid=20 next_clock=721115648 value=13615
Receive: 48 111.967796 111.961305 11: seq: 1c, clock clock=703548908
Receive: 49 112.008866 111.961305 15: seq: 1c, analog_in_state oid=29 next_clock=727595648 value=31437
Receive: 50 112.178757 111.961305 15: seq: 1c, analog_in_state oid=16 next_clock=739835648 value=31419
Receive: 51 112.218705 111.961305 15: seq: 1c, analog_in_state oid=20 next_clock=742715648 value=13619
Receive: 52 112.308701 111.961305 15: seq: 1c, analog_in_state oid=29 next_clock=749195648 value=31432
Receive: 53 112.478806 111.961305 15: seq: 1c, analog_in_state oid=16 next_clock=761435648 value=31421
Receive: 54 112.518723 111.961305 15: seq: 1c, analog_in_state oid=20 next_clock=764315648 value=13628
Receive: 55 112.610459 111.961305 15: seq: 1c, analog_in_state oid=29 next_clock=770795648 value=31438
Receive: 56 112.711817 111.961305 14: seq: 1c, stats count=108 sum=84598 sumsq=403485
Receive: 57 112.778916 111.961305 15: seq: 1c, analog_in_state oid=16 next_clock=783035648 value=31428
Receive: 58 112.818741 111.961305 15: seq: 1c, analog_in_state oid=20 next_clock=785915648 value=13619
Receive: 59 112.908799 111.961305 15: seq: 1c, analog_in_state oid=29 next_clock=792395648 value=31434
Receive: 60 112.952599 112.946229 11: seq: 1d, clock clock=774464858
Receive: 61 113.078781 112.946229 15: seq: 1d, analog_in_state oid=16 next_clock=804635648 value=31427
Receive: 62 113.118882 112.946229 15: seq: 1d, analog_in_state oid=20 next_clock=807515648 value=13622
Receive: 63 113.208878 112.946229 15: seq: 1d, analog_in_state oid=29 next_clock=813995648 value=31438
Receive: 64 113.378739 112.946229 15: seq: 1d, analog_in_state oid=16 next_clock=826235648 value=31422
Receive: 65 113.418778 112.946229 15: seq: 1d, analog_in_state oid=20 next_clock=829115648 value=13627
Receive: 66 113.508652 112.946229 15: seq: 1d, analog_in_state oid=29 next_clock=835595648 value=31431
Receive: 67 113.678818 112.946229 15: seq: 1d, analog_in_state oid=16 next_clock=847835648 value=31425
Receive: 68 113.718704 112.946229 15: seq: 1d, analog_in_state oid=20 next_clock=850715648 value=13620
Receive: 69 113.808701 112.946229 15: seq: 1d, analog_in_state oid=29 next_clock=857195648 value=31433
Receive: 70 113.937248 113.930848 11: seq: 1e, clock clock=845353430
Receive: 71 113.978775 113.930848 15: seq: 1e, analog_in_state oid=16 next_clock=869435648 value=31421
Receive: 72 114.018753 113.930848 15: seq: 1e, analog_in_state oid=20 next_clock=872315648 value=13622
Receive: 73 114.108750 113.930848 15: seq: 1e, analog_in_state oid=29 next_clock=878795648 value=31437
Receive: 74 114.278885 113.930848 15: seq: 1e, analog_in_state oid=16 next_clock=891035648 value=31420
Receive: 75 114.318802 113.930848 15: seq: 1e, analog_in_state oid=20 next_clock=893915648 value=13622
Receive: 76 114.408768 113.930848 15: seq: 1e, analog_in_state oid=29 next_clock=900395648 value=31438
Receive: 77 114.578598 113.930848 15: seq: 1e, analog_in_state oid=16 next_clock=912635648 value=31413
Receive: 78 114.619492 113.930848 15: seq: 1e, analog_in_state oid=20 next_clock=915515648 value=13620
Receive: 79 114.708817 113.930848 15: seq: 1e, analog_in_state oid=29 next_clock=921995648 value=31431
Receive: 80 114.878769 113.930848 15: seq: 1e, analog_in_state oid=16 next_clock=934235648 value=31427
Receive: 81 114.919174 113.930848 15: seq: 1e, analog_in_state oid=20 next_clock=937115648 value=13622
Receive: 82 114.922203 114.915803 11: seq: 1f, clock clock=916267922
Receive: 83 115.008835 114.915803 15: seq: 1f, analog_in_state oid=29 next_clock=943595648 value=31425
Receive: 84 115.178787 114.915803 15: seq: 1f, analog_in_state oid=16 next_clock=955835648 value=31419
Receive: 85 115.218704 114.915803 15: seq: 1f, analog_in_state oid=20 next_clock=958715648 value=13619
Receive: 86 115.308701 114.915803 15: seq: 1f, analog_in_state oid=29 next_clock=965195648 value=31435
Receive: 87 115.478806 114.915803 15: seq: 1f, analog_in_state oid=16 next_clock=977435648 value=31420
Receive: 88 115.519394 114.915803 15: seq: 1f, analog_in_state oid=20 next_clock=980315648 value=13619
Receive: 89 115.608719 114.915803 15: seq: 1f, analog_in_state oid=29 next_clock=986795648 value=31436
Receive: 90 115.778854 114.915803 15: seq: 1f, analog_in_state oid=16 next_clock=999035648 value=31421
Receive: 91 115.818894 114.915803 15: seq: 1f, analog_in_state oid=20 next_clock=1001915648 value=13617
Receive: 92 115.908897 115.900697 11: seq: 10, clock clock=987239762
Receive: 93 115.908768 115.900697 15: seq: 10, analog_in_state oid=29 next_clock=1008395648 value=31430
Receive: 94 116.079025 115.900697 15: seq: 10, analog_in_state oid=16 next_clock=1020635648 value=31415
Receive: 95 116.124985 115.900697 15: seq: 10, analog_in_state oid=20 next_clock=1023515648 value=13617
Receive: 96 116.208878 115.900697 15: seq: 10, analog_in_state oid=29 next_clock=1029995648 value=31435
Receive: 97 116.378800 115.900697 15: seq: 10, analog_in_state oid=16 next_clock=1042235648 value=31424
Receive: 98 116.418869 115.900697 15: seq: 10, analog_in_state oid=20 next_clock=1045115648 value=13616
Receive: 99 116.441206 116.433381 12: seq: 11, shutdown clock=1025636324 static_string_id=Command request
webhooks client 3045443952: Disconnected
Restarting printer
Start printer at Mon Jan 23 18:25:51 2023 (1674491151.3 120.1)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
webhooks client 3046196208: New connection
webhooks client 3046196208: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': got {'oid': 29, 'next_clock': 1505195648, 'value': 31427, '#name': 'analog_in_state', '#sent_time': 122.789001916, '#receive_time': 122.80876128}
mcu 'mcu': got {'count': 177, 'sum': 209762, 'sumsq': 1272662, '#name': 'stats', '#sent_time': 122.84701582800001, '#receive_time': 122.853051765}
mcu 'mcu': got {'oid': 16, 'next_clock': 1517435648, 'value': 31426, '#name': 'analog_in_state', '#sent_time': 122.96762129000001, '#receive_time': 122.978805215}
mcu 'mcu': got {'oid': 20, 'next_clock': 1520315648, 'value': 13628, '#name': 'analog_in_state', '#sent_time': 122.96762129000001, '#receive_time': 123.018966345}
mcu 'mcu': got {'oid': 29, 'next_clock': 1526795648, 'value': 31428, '#name': 'analog_in_state', '#sent_time': 123.086945013, '#receive_time': 123.10972561599999}
Loaded MCU 'mcu' 105 commands (v0.10.0-615-g96ea871b / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=357.558140 slope=-767.441860
mcu 'mcu': got {'oid': 16, 'next_clock': 1539035648, 'value': 31423, '#name': 'analog_in_state', '#sent_time': 123.26873821400001, '#receive_time': 123.282882344}
MCU error during connect
Traceback (most recent call last):
  File "/home/thw/klipper/klippy/klippy.py", line 180, in _connect
    cb()
  File "/home/thw/klipper/klippy/mcu.py", line 726, in _connect
    config_params = self._send_get_config()
  File "/home/thw/klipper/klippy/mcu.py", line 713, in _send_get_config
    self._name,))
mcu.error: Can not update MCU 'mcu' config as it is shutdown
No build file /home/thw/klipper/klippy/../.config
No build file /home/thw/klipper/klippy/../out/klipper.dict
No build file /home/thw/klipper/klippy/../out/klipper.elf
mcu 'mcu': got {'oid': 20, 'next_clock': 1541915648, 'value': 13640, '#name': 'analog_in_state', '#sent_time': 123.288696709, '#receive_time': 123.318862567}
mcu 'mcu': got {'oid': 29, 'next_clock': 1548395648, 'value': 31431, '#name': 'analog_in_state', '#sent_time': 123.288696709, '#receive_time': 123.409682873}
Attempting MCU 'mcu' reset command
webhooks client 3046196208: Disconnected
Restarting printer
Start printer at Mon Jan 23 18:25:55 2023 (1674491155.7 124.5)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
webhooks client 3045757392: New connection
webhooks client 3045757392: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
Loaded MCU 'mcu' 105 commands (v0.10.0-615-g96ea871b / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=357.558140 slope=-767.441860
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (15.0, 15.0)    | (15.0, 15.0)
  1   | (86.7, 15.0)    | (86.7, 15.0)
  2   | (158.3, 15.0)   | (158.3, 15.0)
  3   | (230.0, 15.0)   | (230.0, 15.0)
  4   | (230.0, 86.7)   | (230.0, 86.7)
  5   | (158.3, 86.7)   | (158.3, 86.7)
  6   | (86.7, 86.7)    | (86.7, 86.7)
  7   | (15.0, 86.7)    | (15.0, 86.7)
  8   | (15.0, 158.3)   | (15.0, 158.3)
  9   | (86.7, 158.3)   | (86.7, 158.3)
  10  | (158.3, 158.3)  | (158.3, 158.3)
  11  | (230.0, 158.3)  | (230.0, 158.3)
  12  | (230.0, 230.0)  | (230.0, 230.0)
  13  | (158.3, 230.0)  | (158.3, 230.0)
  14  | (86.7, 230.0)   | (86.7, 230.0)
  15  | (15.0, 230.0)   | (15.0, 230.0)
Starting heater checks for extruder
Stats 127.6: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1179 bytes_read=4114 bytes_retransmit=0 bytes_invalid=0 send_seq=123 receive_seq=123 retransmit_seq=0 srtt=0.008 rttvar=0.003 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72252324  heater_bed: target=0 temp=0.0 pwm=0.000 sysload=4.83 cputime=8.476 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=0.0 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 3045757392
webhooks: registering remote method 'reboot_machine' for connection id: 3045757392
webhooks: registering remote method 'pause_job_queue' for connection id: 3045757392
webhooks: registering remote method 'start_job_queue' for connection id: 3045757392
Stats 128.6: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000019 mcu_task_stddev=0.000037 bytes_write=1185 bytes_read=4160 bytes_retransmit=0 bytes_invalid=0 send_seq=124 receive_seq=124 retransmit_seq=0 srtt=0.008 rttvar=0.002 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72046570  heater_bed: target=0 temp=22.4 pwm=0.000 sysload=4.83 cputime=8.524 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=0.0 pwm=0.000
Stats 129.6: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000019 mcu_task_stddev=0.000037 bytes_write=1224 bytes_read=4361 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72024193  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.83 cputime=8.567 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 130.6: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000019 mcu_task_stddev=0.000037 bytes_write=1245 bytes_read=4517 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72006330  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.68 cputime=8.592 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 131.6: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000019 mcu_task_stddev=0.000037 bytes_write=1266 bytes_read=4688 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71999235  heater_bed: target=0 temp=22.9 pwm=0.000 sysload=4.68 cputime=8.617 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 132.6: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000019 mcu_task_stddev=0.000037 bytes_write=1287 bytes_read=4874 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998667  heater_bed: target=0 temp=22.6 pwm=0.000 sysload=4.68 cputime=8.642 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.5 pwm=0.000
Stats 133.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1308 bytes_read=5044 bytes_retransmit=0 bytes_invalid=0 send_seq=135 receive_seq=135 retransmit_seq=0 srtt=0.007 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71997021  heater_bed: target=0 temp=22.8 pwm=0.000 sysload=4.68 cputime=8.667 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.5 pwm=0.000
Stats 134.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1314 bytes_read=5210 bytes_retransmit=0 bytes_invalid=0 send_seq=136 receive_seq=136 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71993943  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.68 cputime=8.689 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 135.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1335 bytes_read=5396 bytes_retransmit=0 bytes_invalid=0 send_seq=138 receive_seq=138 retransmit_seq=0 srtt=0.007 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71994656  heater_bed: target=0 temp=22.6 pwm=0.000 sysload=4.62 cputime=8.729 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 136.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1354 bytes_read=5552 bytes_retransmit=0 bytes_invalid=0 send_seq=140 receive_seq=140 retransmit_seq=0 srtt=0.007 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71995397  heater_bed: target=0 temp=22.6 pwm=0.000 sysload=4.62 cputime=8.754 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 137.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1360 bytes_read=5718 bytes_retransmit=0 bytes_invalid=0 send_seq=141 receive_seq=141 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72000829  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.62 cputime=8.778 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.4 pwm=0.000
Stats 138.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1366 bytes_read=5913 bytes_retransmit=0 bytes_invalid=0 send_seq=142 receive_seq=142 retransmit_seq=0 srtt=0.008 rttvar=0.003 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72008263  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.62 cputime=8.803 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 139.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1372 bytes_read=6064 bytes_retransmit=0 bytes_invalid=0 send_seq=143 receive_seq=143 retransmit_seq=0 srtt=0.008 rttvar=0.002 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72006089  heater_bed: target=0 temp=22.6 pwm=0.000 sysload=4.62 cputime=8.827 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 140.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1378 bytes_read=6245 bytes_retransmit=0 bytes_invalid=0 send_seq=144 receive_seq=144 retransmit_seq=0 srtt=0.008 rttvar=0.002 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72003971  heater_bed: target=0 temp=22.5 pwm=0.000 sysload=4.50 cputime=8.850 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.5 pwm=0.000
Stats 141.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1384 bytes_read=6411 bytes_retransmit=0 bytes_invalid=0 send_seq=145 receive_seq=145 retransmit_seq=0 srtt=0.008 rttvar=0.002 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72002596  heater_bed: target=0 temp=22.8 pwm=0.000 sysload=4.50 cputime=8.874 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 142.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1390 bytes_read=6562 bytes_retransmit=0 bytes_invalid=0 send_seq=146 receive_seq=146 retransmit_seq=0 srtt=0.008 rttvar=0.002 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72001905  heater_bed: target=0 temp=22.8 pwm=0.000 sysload=4.50 cputime=8.898 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 143.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1396 bytes_read=6757 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72002124  heater_bed: target=0 temp=22.9 pwm=0.000 sysload=4.50 cputime=8.924 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.5 pwm=0.000
Stats 144.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1402 bytes_read=6923 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72001530  heater_bed: target=0 temp=22.8 pwm=0.000 sysload=4.50 cputime=8.948 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 145.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1408 bytes_read=7074 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72000808  heater_bed: target=0 temp=22.9 pwm=0.000 sysload=4.38 cputime=8.971 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 146.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1414 bytes_read=7255 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72000314  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.38 cputime=8.996 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.5 pwm=0.000
Stats 147.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1420 bytes_read=7421 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71999978  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.38 cputime=9.020 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 148.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1426 bytes_read=7586 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=72000168  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.38 cputime=9.045 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.8 pwm=0.000
Stats 149.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1432 bytes_read=7767 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71999765  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.38 cputime=9.070 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.5 pwm=0.000
Stats 150.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1438 bytes_read=7933 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71999499  heater_bed: target=0 temp=22.8 pwm=0.000 sysload=4.27 cputime=9.095 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 151.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1444 bytes_read=8084 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71999238  heater_bed: target=0 temp=22.8 pwm=0.000 sysload=4.27 cputime=9.118 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 152.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1450 bytes_read=8265 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998694  heater_bed: target=0 temp=22.9 pwm=0.000 sysload=4.27 cputime=9.142 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 153.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1456 bytes_read=8431 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998589  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.27 cputime=9.165 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 154.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1462 bytes_read=8596 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998822  heater_bed: target=0 temp=22.9 pwm=0.000 sysload=4.27 cputime=9.187 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 155.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1468 bytes_read=8777 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998765  heater_bed: target=0 temp=22.8 pwm=0.000 sysload=4.32 cputime=9.210 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 156.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1474 bytes_read=8943 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.007 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998498  heater_bed: target=0 temp=22.5 pwm=0.000 sysload=4.32 cputime=9.233 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 157.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1480 bytes_read=9094 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.007 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998454  heater_bed: target=0 temp=22.8 pwm=0.000 sysload=4.32 cputime=9.257 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 158.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1486 bytes_read=9275 bytes_retransmit=0 bytes_invalid=0 send_seq=162 receive_seq=162 retransmit_seq=0 srtt=0.007 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998420  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.32 cputime=9.281 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 159.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1492 bytes_read=9455 bytes_retransmit=0 bytes_invalid=0 send_seq=163 receive_seq=163 retransmit_seq=0 srtt=0.007 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998233  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.32 cputime=9.305 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 160.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1498 bytes_read=9606 bytes_retransmit=0 bytes_invalid=0 send_seq=164 receive_seq=164 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71997939  heater_bed: target=0 temp=22.8 pwm=0.000 sysload=4.30 cputime=9.325 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 161.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1504 bytes_read=9787 bytes_retransmit=0 bytes_invalid=0 send_seq=165 receive_seq=165 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998740  heater_bed: target=0 temp=22.8 pwm=0.000 sysload=4.30 cputime=9.352 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 162.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1510 bytes_read=9953 bytes_retransmit=0 bytes_invalid=0 send_seq=166 receive_seq=166 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998693  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.30 cputime=9.376 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.5 pwm=0.000
Stats 163.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1516 bytes_read=10104 bytes_retransmit=0 bytes_invalid=0 send_seq=167 receive_seq=167 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998621  heater_bed: target=0 temp=22.9 pwm=0.000 sysload=4.30 cputime=9.399 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 164.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1522 bytes_read=10299 bytes_retransmit=0 bytes_invalid=0 send_seq=168 receive_seq=168 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998582  heater_bed: target=0 temp=22.9 pwm=0.000 sysload=4.30 cputime=9.424 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 165.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1528 bytes_read=10465 bytes_retransmit=0 bytes_invalid=0 send_seq=169 receive_seq=169 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998525  heater_bed: target=0 temp=22.8 pwm=0.000 sysload=4.27 cputime=9.446 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 166.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1534 bytes_read=10616 bytes_retransmit=0 bytes_invalid=0 send_seq=170 receive_seq=170 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998487  heater_bed: target=0 temp=22.9 pwm=0.000 sysload=4.27 cputime=9.469 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.5 pwm=0.000
Stats 167.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1540 bytes_read=10797 bytes_retransmit=0 bytes_invalid=0 send_seq=171 receive_seq=171 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998437  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.27 cputime=9.493 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 168.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1546 bytes_read=10963 bytes_retransmit=0 bytes_invalid=0 send_seq=172 receive_seq=172 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998434  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.27 cputime=9.518 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 169.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1552 bytes_read=11128 bytes_retransmit=0 bytes_invalid=0 send_seq=173 receive_seq=173 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998389  heater_bed: target=0 temp=22.6 pwm=0.000 sysload=4.27 cputime=9.541 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.8 pwm=0.000
Stats 170.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1558 bytes_read=11309 bytes_retransmit=0 bytes_invalid=0 send_seq=174 receive_seq=174 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998398  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.25 cputime=9.564 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 171.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1564 bytes_read=11475 bytes_retransmit=0 bytes_invalid=0 send_seq=175 receive_seq=175 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998669  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.25 cputime=9.591 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.4 pwm=0.000
Stats 172.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1570 bytes_read=11626 bytes_retransmit=0 bytes_invalid=0 send_seq=176 receive_seq=176 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998665  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.25 cputime=9.614 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 173.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1576 bytes_read=11807 bytes_retransmit=0 bytes_invalid=0 send_seq=177 receive_seq=177 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998635  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.25 cputime=9.638 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 174.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1582 bytes_read=11987 bytes_retransmit=0 bytes_invalid=0 send_seq=178 receive_seq=178 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998790  heater_bed: target=0 temp=22.6 pwm=0.000 sysload=4.25 cputime=9.663 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.5 pwm=0.000
Stats 175.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1588 bytes_read=12138 bytes_retransmit=0 bytes_invalid=0 send_seq=179 receive_seq=179 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998743  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.31 cputime=9.685 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.4 pwm=0.000
Stats 176.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1594 bytes_read=12319 bytes_retransmit=0 bytes_invalid=0 send_seq=180 receive_seq=180 retransmit_seq=0 srtt=0.007 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998719  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.31 cputime=9.710 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 177.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1600 bytes_read=12485 bytes_retransmit=0 bytes_invalid=0 send_seq=181 receive_seq=181 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998674  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.31 cputime=9.734 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.5 pwm=0.000
Stats 178.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1606 bytes_read=12636 bytes_retransmit=0 bytes_invalid=0 send_seq=182 receive_seq=182 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998666  heater_bed: target=0 temp=22.8 pwm=0.000 sysload=4.31 cputime=9.757 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 179.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1612 bytes_read=12831 bytes_retransmit=0 bytes_invalid=0 send_seq=183 receive_seq=183 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998634  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.31 cputime=9.782 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 180.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1624 bytes_read=12997 bytes_retransmit=0 bytes_invalid=0 send_seq=185 receive_seq=184 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998449  heater_bed: target=0 temp=22.8 pwm=0.000 sysload=4.29 cputime=9.805 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Stats 181.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1630 bytes_read=13164 bytes_retransmit=0 bytes_invalid=0 send_seq=186 receive_seq=186 retransmit_seq=0 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998442  heater_bed: target=0 temp=22.6 pwm=0.000 sysload=4.29 cputime=9.829 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.6 pwm=0.000
Stats 182.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1636 bytes_read=13336 bytes_retransmit=0 bytes_invalid=0 send_seq=187 receive_seq=187 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998809  heater_bed: target=0 temp=22.7 pwm=0.000 sysload=4.29 cputime=9.854 print_time=0.001 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.7 pwm=0.000
Resetting prediction variance 530.339: freq=71998685 diff=-64535 stddev=5710.117
Resetting prediction variance 650.501: freq=71998691 diff=-67231 stddev=12968.832
Resetting prediction variance 1001.143: freq=71998642 diff=-71972 stddev=5669.805
Resetting prediction variance 1291.686: freq=71998591 diff=-67100 stddev=5433.706
Resetting prediction variance 1411.851: freq=71998595 diff=-68633 stddev=12374.810
Resetting prediction variance 1882.631: freq=71998601 diff=-70476 stddev=6972.357
Resetting prediction variance 2002.784: freq=71998634 diff=-74677 stddev=13099.183
Resetting prediction variance 2533.658: freq=71998617 diff=-52855 stddev=6963.907
Resetting prediction variance 2713.903: freq=71998641 diff=-71497 stddev=11678.869
Resetting prediction variance 2946.351: freq=71998597 diff=-67733 stddev=7976.437
Resetting prediction variance 3124.632: freq=71998606 diff=-69217 stddev=9176.055
Resetting prediction variance 3564.904: freq=71998610 diff=-51902 stddev=7506.725
Resetting prediction variance 3715.592: freq=71998656 diff=-75194 stddev=13132.749
Resetting prediction variance 4476.929: freq=71998598 diff=-70837 stddev=7246.418
Resetting prediction variance 4597.096: freq=71998603 diff=-69896 stddev=13635.082
Resetting prediction variance 4777.325: freq=71998562 diff=-69249 stddev=8764.833
Resetting prediction variance 5308.201: freq=71998623 diff=-59968 stddev=5865.985
Resetting prediction variance 5488.443: freq=71998601 diff=-70082 stddev=8925.866
Resetting prediction variance 5899.159: freq=71998619 diff=-60195 stddev=8626.091
Resetting prediction variance 6430.050: freq=71998549 diff=-62045 stddev=6145.804
Resetting prediction variance 6636.895: freq=71998551 diff=-71775 stddev=8770.482
Resetting prediction variance 7026.934: freq=71998555 diff=-72559 stddev=7735.074
Resetting prediction variance 7201.271: freq=71998581 diff=-74069 stddev=13624.936
Resetting prediction variance 7500.691: freq=71998624 diff=-78493 stddev=7812.431
Resetting prediction variance 8091.665: freq=71998554 diff=-50454 stddev=6326.262
Resetting prediction variance 8707.275: freq=71998521 diff=-62569 stddev=5573.326
Resetting prediction variance 8863.892: freq=71998610 diff=-69294 stddev=11330.743
Resetting prediction variance 8984.053: freq=71998520 diff=-66447 stddev=12077.887
Resetting prediction variance 9274.596: freq=71998561 diff=-76201 stddev=8763.422
Resetting prediction variance 9865.569: freq=71998513 diff=-57842 stddev=6126.299
Resetting prediction variance 9985.724: freq=71998524 diff=-69494 stddev=12339.628
webhooks client 3045757392: Disconnected
webhooks client 3051448912: New connection
webhooks client 3051448912: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
webhooks: registering remote method 'shutdown_machine' for connection id: 3051448912
webhooks: registering remote method 'reboot_machine' for connection id: 3051448912
webhooks: registering remote method 'pause_job_queue' for connection id: 3051448912
webhooks: registering remote method 'start_job_queue' for connection id: 3051448912
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Mon Jan 23 22:04:22 2023 (1674504262.2 13231.0)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/pts/3: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/pts/3: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/pts/3: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/pts/3: [Errno 11] Resource temporarily unavailable
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Mon Jan 23 22:04:59 2023 (1674504299.7 13268.6)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': got {'oid': 16, 'next_clock': 1774714880, 'value': 31604, '#name': 'analog_in_state', '#sent_time': 13271.514346692999, '#receive_time': 13271.543017189}
mcu 'mcu': got {'oid': 20, 'next_clock': 1777594880, 'value': 13675, '#name': 'analog_in_state', '#sent_time': 13271.574374766, '#receive_time': 13271.583056249001}
webhooks client 3051175024: New connection
mcu 'mcu': got {'oid': 29, 'next_clock': 1784074880, 'value': 31654, '#name': 'analog_in_state', '#sent_time': 13271.637668219, '#receive_time': 13271.672930511}
mcu 'mcu': got {'oid': 16, 'next_clock': 1796314880, 'value': 31604, '#name': 'analog_in_state', '#sent_time': 13271.813846186, '#receive_time': 13271.844317219}
mcu 'mcu': got {'oid': 20, 'next_clock': 1799194880, 'value': 13680, '#name': 'analog_in_state', '#sent_time': 13271.873019765999, '#receive_time': 13271.882921953}
Loaded MCU 'mcu' 105 commands (v0.10.0-615-g96ea871b / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=357.558140 slope=-767.441860
Configured MCU 'mcu' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (15.0, 15.0)    | (15.0, 15.0)
  1   | (86.7, 15.0)    | (86.7, 15.0)
  2   | (158.3, 15.0)   | (158.3, 15.0)
  3   | (230.0, 15.0)   | (230.0, 15.0)
  4   | (230.0, 86.7)   | (230.0, 86.7)
  5   | (158.3, 86.7)   | (158.3, 86.7)
  6   | (86.7, 86.7)    | (86.7, 86.7)
  7   | (15.0, 86.7)    | (15.0, 86.7)
  8   | (15.0, 158.3)   | (15.0, 158.3)
  9   | (86.7, 158.3)   | (86.7, 158.3)
  10  | (158.3, 158.3)  | (158.3, 158.3)
  11  | (230.0, 158.3)  | (230.0, 158.3)
  12  | (230.0, 230.0)  | (230.0, 230.0)
  13  | (158.3, 230.0)  | (158.3, 230.0)
  14  | (86.7, 230.0)   | (86.7, 230.0)
  15  | (15.0, 230.0)   | (15.0, 230.0)
Starting heater checks for extruder
webhooks client 3051175024: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
webhooks: registering remote method 'shutdown_machine' for connection id: 3051175024
webhooks: registering remote method 'reboot_machine' for connection id: 3051175024
webhooks: registering remote method 'pause_job_queue' for connection id: 3051175024
webhooks: registering remote method 'start_job_queue' for connection id: 3051175024
Stats 13338.2: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1643 bytes_read=15388 bytes_retransmit=16 bytes_invalid=55 send_seq=186 receive_seq=186 retransmit_seq=154 srtt=0.008 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71999431  heater_bed: target=0 temp=19.5 pwm=0.000 sysload=5.26 cputime=4.836 print_time=13214.460 buffer_time=0.000 print_stall=0 extruder: target=0 temp=18.9 pwm=0.000
webhooks client 3051175024: Disconnected
Restarting printer
Start printer at Mon Jan 23 22:06:10 2023 (1674504370.5 13339.3)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
webhooks client 3046710768: New connection
webhooks client 3046710768: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Mon Jan 23 22:06:44 2023 (1674504405.0 13373.8)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
webhooks client 3044531568: New connection
webhooks client 3044531568: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': got {'oid': 16, 'next_clock': 1165812992, 'value': 31605, '#name': 'analog_in_state', '#sent_time': 13442.003197131999, '#receive_time': 13442.045508985}
mcu 'mcu': got {'oid': 20, 'next_clock': 1168692992, 'value': 13697, '#name': 'analog_in_state', '#sent_time': 13442.061027939, '#receive_time': 13442.085517528001}
mcu 'mcu': got {'oid': 29, 'next_clock': 1175172992, 'value': 31648, '#name': 'analog_in_state', '#sent_time': 13442.119011334, '#receive_time': 13442.175483342}
mcu 'mcu': got {'oid': 16, 'next_clock': 1187412992, 'value': 31611, '#name': 'analog_in_state', '#sent_time': 13442.294395845, '#receive_time': 13442.345588312}
Loaded MCU 'mcu' 105 commands (v0.10.0-615-g96ea871b / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=357.558140 slope=-767.441860
Configured MCU 'mcu' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (15.0, 15.0)    | (15.0, 15.0)
  1   | (86.7, 15.0)    | (86.7, 15.0)
  2   | (158.3, 15.0)   | (158.3, 15.0)
  3   | (230.0, 15.0)   | (230.0, 15.0)
  4   | (230.0, 86.7)   | (230.0, 86.7)
  5   | (158.3, 86.7)   | (158.3, 86.7)
  6   | (86.7, 86.7)    | (86.7, 86.7)
  7   | (15.0, 86.7)    | (15.0, 86.7)
  8   | (15.0, 158.3)   | (15.0, 158.3)
  9   | (86.7, 158.3)   | (86.7, 158.3)
  10  | (158.3, 158.3)  | (158.3, 158.3)
  11  | (230.0, 158.3)  | (230.0, 158.3)
  12  | (230.0, 230.0)  | (230.0, 230.0)
  13  | (158.3, 230.0)  | (158.3, 230.0)
  14  | (86.7, 230.0)   | (86.7, 230.0)
  15  | (15.0, 230.0)   | (15.0, 230.0)
Starting heater checks for extruder
webhooks: registering remote method 'shutdown_machine' for connection id: 3044531568
webhooks: registering remote method 'reboot_machine' for connection id: 3044531568
webhooks: registering remote method 'pause_job_queue' for connection id: 3044531568
webhooks: registering remote method 'start_job_queue' for connection id: 3044531568
Stats 13565.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1946 bytes_read=24883 bytes_retransmit=16 bytes_invalid=0 send_seq=245 receive_seq=245 retransmit_seq=242 srtt=0.007 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71998632  heater_bed: target=0 temp=19.5 pwm=0.000 sysload=4.92 cputime=6.721 print_time=13442.758 buffer_time=0.789 print_stall=0 extruder: target=0 temp=18.8 pwm=0.000
webhooks client 3044531568: Disconnected
Restarting printer
Start printer at Mon Jan 23 22:09:58 2023 (1674504598.7 13567.6)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
webhooks client 3045438640: New connection
webhooks client 3045438640: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Mon Jan 23 22:10:22 2023 (1674504622.9 13591.7)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
webhooks client 3044605392: New connection
webhooks client 3044605392: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
MCU error during connect
Traceback (most recent call last):
  File "/home/thw/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/thw/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/thw/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/thw/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/thw/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/thw/klipper/klippy/../.config
No build file /home/thw/klipper/klippy/../out/klipper.dict
No build file /home/thw/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Mon Jan 23 22:13:40 2023 (1674504820.3 13789.1)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': got {'oid': 16, 'next_clock': 603209216, 'value': 31603, '#name': 'analog_in_state', '#sent_time': 13792.132905495, '#receive_time': 13792.150620181}
mcu 'mcu': got {'oid': 20, 'next_clock': 606089216, 'value': 13695, '#name': 'analog_in_state', '#sent_time': 13792.132905495, '#receive_time': 13792.190964417001}
mcu 'mcu': got {'oid': 29, 'next_clock': 612569216, 'value': 31653, '#name': 'analog_in_state', '#sent_time': 13792.25509787, '#receive_time': 13792.280808161}
webhooks client 3051174576: New connection
mcu 'mcu': got {'oid': 16, 'next_clock': 624809216, 'value': 31609, '#name': 'analog_in_state', '#sent_time': 13792.43325948, '#receive_time': 13792.450699508001}
mcu 'mcu': got {'oid': 20, 'next_clock': 627689216, 'value': 13698, '#name': 'analog_in_state', '#sent_time': 13792.43325948, '#receive_time': 13792.494156537}
mcu 'mcu': got {'oid': 29, 'next_clock': 634169216, 'value': 31655, '#name': 'analog_in_state', '#sent_time': 13792.556031688999, '#receive_time': 13792.580582313001}
mcu 'mcu': got {'count': 183, 'sum': 215024, 'sumsq': 1294992, '#name': 'stats', '#sent_time': 13792.616303902, '#receive_time': 13792.623926753}
Loaded MCU 'mcu' 105 commands (v0.10.0-615-g96ea871b / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=357.558140 slope=-767.441860
Configured MCU 'mcu' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (15.0, 15.0)    | (15.0, 15.0)
  1   | (86.7, 15.0)    | (86.7, 15.0)
  2   | (158.3, 15.0)   | (158.3, 15.0)
  3   | (230.0, 15.0)   | (230.0, 15.0)
  4   | (230.0, 86.7)   | (230.0, 86.7)
  5   | (158.3, 86.7)   | (158.3, 86.7)
  6   | (86.7, 86.7)    | (86.7, 86.7)
  7   | (15.0, 86.7)    | (15.0, 86.7)
  8   | (15.0, 158.3)   | (15.0, 158.3)
  9   | (86.7, 158.3)   | (86.7, 158.3)
  10  | (158.3, 158.3)  | (158.3, 158.3)
  11  | (230.0, 158.3)  | (230.0, 158.3)
  12  | (230.0, 230.0)  | (230.0, 230.0)
  13  | (158.3, 230.0)  | (158.3, 230.0)
  14  | (86.7, 230.0)   | (86.7, 230.0)
  15  | (15.0, 230.0)   | (15.0, 230.0)
Starting heater checks for extruder
webhooks client 3051174576: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
webhooks: registering remote method 'shutdown_machine' for connection id: 3051174576
webhooks: registering remote method 'reboot_machine' for connection id: 3051174576
webhooks: registering remote method 'pause_job_queue' for connection id: 3051174576
webhooks: registering remote method 'start_job_queue' for connection id: 3051174576
Stats 13839.8: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000008 bytes_write=1523 bytes_read=12167 bytes_retransmit=0 bytes_invalid=0 send_seq=169 receive_seq=169 retransmit_seq=0 srtt=0.008 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=71999067  heater_bed: target=0 temp=19.4 pwm=0.000 sysload=5.29 cputime=4.493 print_time=13716.823 buffer_time=0.700 print_stall=0 extruder: target=0 temp=18.9 pwm=0.000
webhooks client 3051174576: Disconnected
Restarting printer
Start printer at Mon Jan 23 22:14:32 2023 (1674504872.8 13841.7)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
webhooks client 3045080784: New connection
webhooks client 3045080784: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Mon Jan 23 22:15:15 2023 (1674504915.9 13884.7)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': got {'oid': 16, 'next_clock': 3191441920, 'value': 31610, '#name': 'analog_in_state', '#sent_time': 13887.701930289999, '#receive_time': 13887.752024125}
mcu 'mcu': got {'oid': 20, 'next_clock': 3194321920, 'value': 13719, '#name': 'analog_in_state', '#sent_time': 13887.762660266999, '#receive_time': 13887.792093702}
mcu 'mcu': got {'oid': 29, 'next_clock': 3200801920, 'value': 31652, '#name': 'analog_in_state', '#sent_time': 13887.820613144, '#receive_time': 13887.883585396}
webhooks client 3051179024: New connection
mcu 'mcu': got {'oid': 16, 'next_clock': 3213041920, 'value': 31614, '#name': 'analog_in_state', '#sent_time': 13887.995265233, '#receive_time': 13888.052408627}
mcu 'mcu': got {'oid': 20, 'next_clock': 3215921920, 'value': 13712, '#name': 'analog_in_state', '#sent_time': 13888.053218109999, '#receive_time': 13888.091989924}
Loaded MCU 'mcu' 105 commands (v0.10.0-615-g96ea871b / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=357.558140 slope=-767.441860
Configured MCU 'mcu' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (15.0, 15.0)    | (15.0, 15.0)
  1   | (86.7, 15.0)    | (86.7, 15.0)
  2   | (158.3, 15.0)   | (158.3, 15.0)
  3   | (230.0, 15.0)   | (230.0, 15.0)
  4   | (230.0, 86.7)   | (230.0, 86.7)
  5   | (158.3, 86.7)   | (158.3, 86.7)
  6   | (86.7, 86.7)    | (86.7, 86.7)
  7   | (15.0, 86.7)    | (15.0, 86.7)
  8   | (15.0, 158.3)   | (15.0, 158.3)
  9   | (86.7, 158.3)   | (86.7, 158.3)
  10  | (158.3, 158.3)  | (158.3, 158.3)
  11  | (230.0, 158.3)  | (230.0, 158.3)
  12  | (230.0, 230.0)  | (230.0, 230.0)
  13  | (158.3, 230.0)  | (158.3, 230.0)
  14  | (86.7, 230.0)   | (86.7, 230.0)
  15  | (15.0, 230.0)   | (15.0, 230.0)
Starting heater checks for extruder
webhooks client 3051179024: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
webhooks: registering remote method 'shutdown_machine' for connection id: 3051179024
webhooks: registering remote method 'reboot_machine' for connection id: 3051179024
webhooks: registering remote method 'pause_job_queue' for connection id: 3051179024
webhooks: registering remote method 'start_job_queue' for connection id: 3051179024
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Mon Jan 23 22:17:03 2023 (1674505023.2 52.9)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
webhooks client 3045081040: New connection
webhooks client 3045081040: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
MCU error during connect
Traceback (most recent call last):
  File "/home/thw/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/thw/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/thw/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/thw/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/thw/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/thw/klipper/klippy/../.config
No build file /home/thw/klipper/klippy/../out/klipper.dict
No build file /home/thw/klipper/klippy/../out/klipper.elf
webhooks client 3045081040: Disconnected
Restarting printer
Start printer at Mon Jan 23 22:18:47 2023 (1674505127.1 156.9)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
webhooks client 3046024400: New connection
webhooks client 3046024400: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
MCU error during connect
Traceback (most recent call last):
  File "/home/thw/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/thw/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/thw/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/thw/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/thw/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/thw/klipper/klippy/../.config
No build file /home/thw/klipper/klippy/../out/klipper.dict
No build file /home/thw/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Mon Jan 23 22:22:19 2023 (1674505339.8 55.5)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
webhooks client 3044843472: New connection
webhooks client 3044843472: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
MCU error during connect
Traceback (most recent call last):
  File "/home/thw/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/thw/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/thw/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/thw/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/thw/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/thw/klipper/klippy/../.config
No build file /home/thw/klipper/klippy/../out/klipper.dict
No build file /home/thw/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Mon Jan 23 22:25:41 2023 (1674505541.1 84.2)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
webhooks client 3044556688: New connection
webhooks client 3044556688: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
mcu 'mcu': Unable to open serial port: [Errno 13] could not open port /dev/pts/3: [Errno 13] Permission denied: '/dev/pts/3'
MCU error during connect
Traceback (most recent call last):
  File "/home/thw/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/thw/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/thw/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/thw/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/thw/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/thw/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/thw/klipper/klippy/../.config
No build file /home/thw/klipper/klippy/../out/klipper.dict
No build file /home/thw/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Mon Jan 23 22:27:49 2023 (1674505670.0 213.0)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
webhooks client 3044715760: New connection
Loaded MCU 'mcu' 105 commands (v0.10.0-615-g96ea871b / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=357.558140 slope=-767.441860
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (15.0, 15.0)    | (15.0, 15.0)
  1   | (86.7, 15.0)    | (86.7, 15.0)
  2   | (158.3, 15.0)   | (158.3, 15.0)
  3   | (230.0, 15.0)   | (230.0, 15.0)
  4   | (230.0, 86.7)   | (230.0, 86.7)
  5   | (158.3, 86.7)   | (158.3, 86.7)
  6   | (86.7, 86.7)    | (86.7, 86.7)
  7   | (15.0, 86.7)    | (15.0, 86.7)
  8   | (15.0, 158.3)   | (15.0, 158.3)
  9   | (86.7, 158.3)   | (86.7, 158.3)
  10  | (158.3, 158.3)  | (158.3, 158.3)
  11  | (230.0, 158.3)  | (230.0, 158.3)
  12  | (230.0, 230.0)  | (230.0, 230.0)
  13  | (158.3, 230.0)  | (158.3, 230.0)
  14  | (86.7, 230.0)   | (86.7, 230.0)
  15  | (15.0, 230.0)   | (15.0, 230.0)
Starting heater checks for extruder
webhooks client 3044715760: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
Resetting prediction variance 217.405: freq=72473535 diff=-636935 stddev=98912.102
webhooks: registering remote method 'shutdown_machine' for connection id: 3044715760
webhooks: registering remote method 'reboot_machine' for connection id: 3044715760
webhooks: registering remote method 'pause_job_queue' for connection id: 3044715760
webhooks: registering remote method 'start_job_queue' for connection id: 3044715760
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Mon Jan 23 22:32:03 2023 (1674505923.6 84.2)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
webhooks client 3051175024: New connection
Loaded MCU 'mcu' 105 commands (v0.10.0-615-g96ea871b / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=357.558140 slope=-767.441860
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (15.0, 15.0)    | (15.0, 15.0)
  1   | (86.7, 15.0)    | (86.7, 15.0)
  2   | (158.3, 15.0)   | (158.3, 15.0)
  3   | (230.0, 15.0)   | (230.0, 15.0)
  4   | (230.0, 86.7)   | (230.0, 86.7)
  5   | (158.3, 86.7)   | (158.3, 86.7)
  6   | (86.7, 86.7)    | (86.7, 86.7)
  7   | (15.0, 86.7)    | (15.0, 86.7)
  8   | (15.0, 158.3)   | (15.0, 158.3)
  9   | (86.7, 158.3)   | (86.7, 158.3)
  10  | (158.3, 158.3)  | (158.3, 158.3)
  11  | (230.0, 158.3)  | (230.0, 158.3)
  12  | (230.0, 230.0)  | (230.0, 230.0)
  13  | (158.3, 230.0)  | (158.3, 230.0)
  14  | (86.7, 230.0)   | (86.7, 230.0)
  15  | (15.0, 230.0)   | (15.0, 230.0)
Starting heater checks for extruder
webhooks client 3051175024: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
webhooks: registering remote method 'shutdown_machine' for connection id: 3051175024
webhooks: registering remote method 'reboot_machine' for connection id: 3051175024
webhooks: registering remote method 'pause_job_queue' for connection id: 3051175024
webhooks: registering remote method 'start_job_queue' for connection id: 3051175024
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Mon Jan 23 22:35:27 2023 (1674506127.7 54.5)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
webhooks client 3044781584: New connection
Loaded MCU 'mcu' 105 commands (v0.10.0-615-g96ea871b / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=357.558140 slope=-767.441860
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (15.0, 15.0)    | (15.0, 15.0)
  1   | (86.7, 15.0)    | (86.7, 15.0)
  2   | (158.3, 15.0)   | (158.3, 15.0)
  3   | (230.0, 15.0)   | (230.0, 15.0)
  4   | (230.0, 86.7)   | (230.0, 86.7)
  5   | (158.3, 86.7)   | (158.3, 86.7)
  6   | (86.7, 86.7)    | (86.7, 86.7)
  7   | (15.0, 86.7)    | (15.0, 86.7)
  8   | (15.0, 158.3)   | (15.0, 158.3)
  9   | (86.7, 158.3)   | (86.7, 158.3)
  10  | (158.3, 158.3)  | (158.3, 158.3)
  11  | (230.0, 158.3)  | (230.0, 158.3)
  12  | (230.0, 230.0)  | (230.0, 230.0)
  13  | (158.3, 230.0)  | (158.3, 230.0)
  14  | (86.7, 230.0)   | (86.7, 230.0)
  15  | (15.0, 230.0)   | (15.0, 230.0)
Starting heater checks for extruder
webhooks client 3044781584: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
webhooks: registering remote method 'shutdown_machine' for connection id: 3044781584
webhooks: registering remote method 'reboot_machine' for connection id: 3044781584
webhooks: registering remote method 'pause_job_queue' for connection id: 3044781584
webhooks: registering remote method 'start_job_queue' for connection id: 3044781584
Resetting prediction variance 291.814: freq=71998679 diff=-61654 stddev=11194.250
Resetting prediction variance 576.460: freq=71998530 diff=-71955 stddev=8762.177
Starting Klippy...
Args: ['/home/thw/klipper/klippy/klippy.py', '/home/thw/printer_data/config/printer.cfg', '-l', '/home/thw/printer_data/logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.11.0-86-g6026a99a'
CPU: 4 core ARMv7 Processor rev 5 (v7l)
Python: '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]'
Start printer at Mon Jan 23 23:26:12 2023 (1674509172.5 3099.3)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the current print job
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 E-1 F3000
	G1 Z5 F4500
	G90
	G1 X0 Y220 F5000
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	PAUSE_BASE
	G91
	{% if act_extrude_temp > min_extrude_temp %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
	{%set act_extrude_temp = printer.extruder.temperature|int %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if act_extrude_temp > min_extrude_temp %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PA_Calibration]
description = Adjust Velocity and PA parameters for bowden extruder
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro PID_BED]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro Motor_off]
gcode = 
	M18

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	SET_PIN PIN=BEEPER_PIN VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro PRIME_LINE]
description = Do a prime line
gcode = 
	G0 Z5 X3 Y2 F5000.0
	G1 Z0.3 F240
	G92 E0.0
	G1 E5.0 F500
	G1 X0.1 Y200.0 Z0.3 F1500.0 E25
	G1 X1 Y200.0 Z0.3 F5000.0
	G1 X1 Y10 Z0.3 F1500.0 E30
	G92 E0.0
	G1 Z2.0 F3000
	G1 X5 Y20 Z05 F5000.0

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose = True
variable_print_default_bed_temp = 75
variable_print_default_extruder_temp = 220
variable_print_default_retract_length = 5
variable_print_default_feedrate_raft = 30
variable_print_default_initial_purge = 1
variable_print_default_do_raft = 1
variable_print_default_do_retract = 0
variable_print_default_print_size = 40
variable_print_default_print_height = 15
variable_print_default_corner_radius = 8
variable_print_default_number_of_perimeters = 2
variable_print_default_fan_speed = 20
variable_print_default_e_multiplier = 1.00
variable_print_default_filament_diameter = 1.75
variable_print_default_extrusion_width = 0.4
variable_print_default_layer_height = 0.2
variable_print_default_feedrate_print = 100
variable_print_default_feedrate_travel = 200
variable_print_default_feedrate_z = 20
variable_print_default_feedrate_retract = 40
variable_print_default_pa_start = 0
variable_print_default_pa_increment = 0.05
variable_print_default_print_size_pa = 150
variable_print_default_num_bands = 20
variable_print_default_lines_per_band = 4
variable_print_default_feedrate_outer = 5
variable_print_default_feedrate_control = 30
variable_print_default_feedrate_inner = 120
variable_print_default_spacing_line = 0.4
variable_print_default_feedrate_retract_pa = 40
gcode = 

[gcode_macro _CALIBRATE_START]
gcode = 
	
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	
	M190 S{BED_TEMP}
	G28
	Z_TILT_ADJUST
	G28 Z
	M109 S{EXTRUDER_TEMP}
	M83
	G1 X0 Y0 F2200
	G92 E0.0
	G90
	PRIME_LINE

[gcode_macro _CALIBRATE_END]
gcode = 
	
	
	G91
	G1 E-1 F3000
	G1 X-0.5 Y-0.5 Z5 E-5
	G90
	G1 X0 Y150 F2200
	M107
	
	G90

[gcode_macro KALIBRIEREN]
description = Calibrate the printer flow or pressure advance
gcode = 
	{% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	
	{% if TYPE=="flow" %}
	FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% elif TYPE=="pa" %}
	PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	END_PRINT
	
	{% else %}
	{action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
	{action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}
	{% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}
	{% set do_raft         = (1)|int %}
	{% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}
	{% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}
	{% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}
	{% set e_multiplier    = (1.25 if do_raft == 1 else 1.5)|int %},
	{% set retract_length  = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}
	{% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}
	{% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}
	{% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract_pa)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	
	
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	_CALIBRATE_END

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
	{% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %}
	{% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %}
	{% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %}
	{% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %}
	{% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %}
	{% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %}
	{% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %}
	{% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %}
	{% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %}
	{% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %}
	{% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %}
	{% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}
	{% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	{% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}
	{% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %}
	
	
	
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
	{action_respond_info("")}
	{action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
	{action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
	{action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
	{action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
	{action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)}
	{action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
	{action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
	{action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)}
	{action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
	{action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)}
	{action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
	{action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
	{action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)}
	{action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
	{action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
	{action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
	{action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))}
	{action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}
	
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
	{action_respond_info("")}
	{action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
	{action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
	{action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	_CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	_CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[gcode_arcs]
resolution = 0.1

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[mcu]
serial = /dev/pts/3
restart_method = command

[gcode_macro m205]
gcode = 

[save_variables]
filename = /home/thw/printer_data/config/saved_variables.cfg

[virtual_sdcard]
path = /home/thw/printer_data/gcodes

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = !PA7
position_min = -3
position_endstop = -3
position_max = 245
homing_speed = 30.0

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC13
microsteps = 16
rotation_distance = 32
endstop_pin = !PC5
position_min = -17
position_endstop = -17
position_max = 245
homing_speed = 30.0

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC14
microsteps = 16
rotation_distance = 8
endstop_pin = PB2
position_endstop = 0.0
position_max = 260
position_min = -3
homing_speed = 5.0

[stepper_z1]
step_pin = PC0
dir_pin = !PC1
enable_pin = !PC15
microsteps = 16
rotation_distance = 8
endstop_pin = PC6

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PA15
microsteps = 16
rotation_distance = 22.2203
gear_ratio = 50:17
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC4
min_temp = 0
max_temp = 260
max_extrude_cross_section = 50
max_extrude_only_distance = 400.0
pressure_advance = 0.57
control = pid
pid_kp = 29.905
pid_ki = 1.764
pid_kd = 126.723

[heater_fan extruder_fan]
pin = PB1

[heater_bed]
heater_pin = PA4
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PB0
control = pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp = 0
max_temp = 110

[fan]
pin = PA0

[temperature_fan Mainboard]
pin = mcu:PA14
sensor_type = temperature_mcu
max_power = 1.0
shutdown_speed = 1.0
hardware_pwm = false
kick_start_time = 0.5
off_below = 0.4
max_temp = 100
min_temp = 20
target_temp = 50
max_speed = 1.0
min_speed = 0.3
control = pid
pid_kp = 1
pid_ki = 1
pid_kd = 1

[probe]
pin = !PB12
activate_gcode = 
	probe_reset
speed = 2.0
samples = 3
sample_retract_dist = 2.0
lift_speed = 2
samples_result = average
samples_tolerance = 0.05
samples_tolerance_retries = 5
z_offset = -0.080

[output_pin BEEPER_PIN]
pin = PB15
pwm = True
value = 0
shutdown_value = 0
cycle_time = 0.001
scale = 1

[output_pin probe_reset_pin]
pin = PB13

[output_pin LED]
pin = mcu:PA13
pwm = False
value = 0

[bed_mesh]
mesh_min = 15,15
mesh_max = 230, 230
probe_count = 4,4
algorithm = bicubic
speed = 50

[z_tilt]
z_positions = 
	15,230
	230,230
points = 
	15,230
	230,230
speed = 150
horizontal_move_z = 2
retry_tolerance = 0.075

[filament_switch_sensor runout]
pause_on_runout = True
switch_pin = PA5

[safe_z_home]
home_xy_position = -3,-13
z_hop = 10

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1500
max_accel_to_decel = 1500
max_z_velocity = 15
max_z_accel = 100
square_corner_velocity = 8

[gcode_macro START_PRINT]
gcode = 
	M106 S0
	M220 S100
	M221 S100
	{% set BED_TEMP = params.BED_TEMP|default(75)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G28
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	PRIME_LINE
	
	
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	
	G91
	G1 X-20 Y-20 Z5 E-3 F500
	
	G1 Z10 F5000
	
	G90
	G1 X0 Y200 F2200
	
	
	
	G92 E0
	M117 Print done

[gcode_macro probe_reset]
gcode = 
	SET_PIN PIN=probe_reset_pin VALUE=0
	G4 P300
	SET_PIN PIN=probe_reset_pin VALUE=1
	G4 P100

[bed_mesh default]
version = 1
points = 
	-2.027500, -1.935000, -1.914167, -1.935833
	-2.233333, -2.188333, -2.110833, -2.066667
	-2.402500, -2.294167, -2.212500, -2.241667
	-2.420000, -2.310000, -2.333333, -2.375000
tension = 0.2
min_x = 15.0
algo = bicubic
y_count = 4
mesh_y_pps = 2
min_y = 15.0
x_count = 4
max_y = 229.98
mesh_x_pps = 2
max_x = 229.97
=======================
Extruder max_extrude_ratio=20.787584
mcu 'mcu': Starting serial connect
mcu 'mcu': got {'oid': 16, 'next_clock': 463620608, 'value': 31640, '#name': 'analog_in_state', '#sent_time': 3102.4035314469998, '#receive_time': 3102.453991492}
mcu 'mcu': got {'oid': 20, 'next_clock': 466500608, 'value': 13669, '#name': 'analog_in_state', '#sent_time': 3102.4627050269996, '#receive_time': 3102.494244175}
mcu 'mcu': got {'oid': 29, 'next_clock': 472980608, 'value': 31693, '#name': 'analog_in_state', '#sent_time': 3102.521664984, '#receive_time': 3102.5858884570002}
mcu 'mcu': got {'oid': 16, 'next_clock': 485220608, 'value': 31648, '#name': 'analog_in_state', '#sent_time': 3102.697324153, '#receive_time': 3102.7540403020002}
mcu 'mcu': got {'oid': 20, 'next_clock': 488100608, 'value': 13670, '#name': 'analog_in_state', '#sent_time': 3102.754849784, '#receive_time': 3102.793896256}
webhooks client 3046502736: New connection
Loaded MCU 'mcu' 105 commands (v0.10.0-615-g96ea871b / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=357.558140 slope=-767.441860
mcu 'mcu': got {'oid': 29, 'next_clock': 494580608, 'value': 31689, '#name': 'analog_in_state', '#sent_time': 3102.8697484589998, '#receive_time': 3102.8883786730003}
Configured MCU 'mcu' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (15.0, 15.0)    | (15.0, 15.0)
  1   | (86.7, 15.0)    | (86.7, 15.0)
  2   | (158.3, 15.0)   | (158.3, 15.0)
  3   | (230.0, 15.0)   | (230.0, 15.0)
  4   | (230.0, 86.7)   | (230.0, 86.7)
  5   | (158.3, 86.7)   | (158.3, 86.7)
  6   | (86.7, 86.7)    | (86.7, 86.7)
  7   | (15.0, 86.7)    | (15.0, 86.7)
  8   | (15.0, 158.3)   | (15.0, 158.3)
  9   | (86.7, 158.3)   | (86.7, 158.3)
  10  | (158.3, 158.3)  | (158.3, 158.3)
  11  | (230.0, 158.3)  | (230.0, 158.3)
  12  | (230.0, 230.0)  | (230.0, 230.0)
  13  | (158.3, 230.0)  | (158.3, 230.0)
  14  | (86.7, 230.0)   | (86.7, 230.0)
  15  | (15.0, 230.0)   | (15.0, 230.0)
Starting heater checks for extruder
webhooks client 3046502736: Client info {'program': 'Moonraker', 'version': 'v0.7.1-807-gdb81607'}
webhooks: registering remote method 'shutdown_machine' for connection id: 3046502736
webhooks: registering remote method 'reboot_machine' for connection id: 3046502736
webhooks: registering remote method 'pause_job_queue' for connection id: 3046502736
webhooks: registering remote method 'start_job_queue' for connection id: 3046502736
